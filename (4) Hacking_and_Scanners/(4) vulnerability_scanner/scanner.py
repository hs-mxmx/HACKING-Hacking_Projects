
import requests, re, urlparse
from BeautifulSoup import BeautifulSoup


class Scanner:

    # Constructor
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    # Method to extract urls from the current website (View Page Source)
    def extract_links(self, url):
        response = self.session.get(url)
        href_links = re.findall('(?:href=")(.*?)"', response.content)
        href_links_2 = re.findall("(?:href=')(.*?)'", response.content)
        return href_links + href_links_2

    # Method that crawls current session recursively,  and then appends in case isn't a link to ignore
    def crawl(self, url=None):
        if url == None:
            url = self.target_url
        href_links = self.extract_links(url)
        for link in href_links:
            link = urlparse.urljoin(url, link)

            if "#" in link:
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)

    # Method to extract form from current session
    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content)
        return parsed_html.findAll("form")

    # Method to extract the fields from the current form, and then send it as a post request
    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        # print(" Action: " + str(action))
        # print(" Post URL: " + str(post_url))
        method = form.get("method")
        # print(" Method: " + str(method))
        inputs_list = form.findAll("input")

        post_data = {}
        for input in inputs_list:
            # Extract input's fields
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            # print(" Input Name: " + str(input_name))
            if input_type == "text":
                input_value = value
            post_data[input_name] = input_value

        # In case method is post, we send post request, otherwise we send a get
        if method == "post" or method == "POST":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    # Method that gets the target_links and starts extracting the forms to test the vulnerabilities
    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+] Testing form in " + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)

                # XSS Base Vulnerability
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS Discovered in " + link + "in the following form: ")
                    print(form)

            # Vulnerabilities in links
            if "=" in link:
                print("[+] Testing in Link " + link)
                # XSS Stored Vulnerability
                is_vulnerable_to_xss_link = self.test_xss_in_link(link)
                if is_vulnerable_to_xss_link:
                    print("\n\n[***] XSS url Discovered in " + link)

    # Method that sends a Js injection to test the vulnerability, via get in links (XSS_Stored)
    def test_xss_in_link(self, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=", "=" + xss_test_script)
        html_script = "<script>alert('test')</script>"
        response = self.session.get(url)
        # print(response.content)
        if (xss_test_script in response.content) or (html_script in response.content):
            return True

    # Method that sends a Js injection to test the vulnerability, via form in source code (XSS_Based)
    def test_xss_in_form(self, form, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        # print(response.content)
        html_script = "<script>alert('test')</script>"
        # print(html_script)
        if (xss_test_script in response.content) or (html_script in response.content):
            return True
